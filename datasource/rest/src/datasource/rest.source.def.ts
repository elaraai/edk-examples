// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
// East type declarations 
import * as ELARA from "@elaraai/edk/lib"

const rest_authorise_response_body_type = ELARA.StructType({
    code: 'string',
});
const rest_token_response_body_type = ELARA.StructType({
    access_token: 'string',
    token_type: 'string',
    scope: 'string',
});
const rest_repos_response_headers_type = ELARA.StructType({
    'access-control-allow-origin': 'string',
    'access-control-expose-headers': 'string',
    'cache-control': 'string',
    connection: 'string',
    'content-encoding': 'string',
    'content-security-policy': 'string',
    'content-type': 'string',
    date: 'string',
    etag: 'string',
    'referrer-policy': 'string',
    server: 'string',
    'strict-transport-security': 'string',
    'transfer-encoding': 'string',
    vary: 'string',
    'x-accepted-oauth-scopes': 'string',
    'x-content-type-options': 'string',
    'x-frame-options': 'string',
    'x-github-media-type': 'string',
    'x-github-request-id': 'string',
    'x-oauth-client-id': 'string',
    'x-oauth-scopes': 'string',
    'x-ratelimit-limit': 'float',
    'x-ratelimit-remaining': 'float',
    'x-ratelimit-reset': 'float',
    'x-ratelimit-resource': 'string',
    'x-ratelimit-used': 'float',
    'x-xss-protection': 'float',
});
const rest_repos_response_body_type = ELARA.ArrayType(ELARA.StructType({
    id: 'float',
    node_id: 'string',
    name: 'string',
    full_name: 'string',
    'private': 'boolean',
    owner: ELARA.StructType({
        login: 'string',
        id: 'float',
        node_id: 'string',
        avatar_url: 'string',
        gravatar_id: 'string',
        url: 'string',
        html_url: 'string',
        followers_url: 'string',
        following_url: 'string',
        gists_url: 'string',
        starred_url: 'string',
        subscriptions_url: 'string',
        organizations_url: 'string',
        repos_url: 'string',
        events_url: 'string',
        received_events_url: 'string',
        type: 'string',
        site_admin: 'boolean',
    }),
    html_url: 'string',
    description: 'string',
    fork: 'boolean',
    url: 'string',
    forks_url: 'string',
    keys_url: 'string',
    collaborators_url: 'string',
    teams_url: 'string',
    hooks_url: 'string',
    issue_events_url: 'string',
    events_url: 'string',
    assignees_url: 'string',
    branches_url: 'string',
    tags_url: 'string',
    blobs_url: 'string',
    git_tags_url: 'string',
    git_refs_url: 'string',
    trees_url: 'string',
    statuses_url: 'string',
    languages_url: 'string',
    stargazers_url: 'string',
    contributors_url: 'string',
    subscribers_url: 'string',
    subscription_url: 'string',
    commits_url: 'string',
    git_commits_url: 'string',
    comments_url: 'string',
    issue_comment_url: 'string',
    contents_url: 'string',
    compare_url: 'string',
    merges_url: 'string',
    archive_url: 'string',
    downloads_url: 'string',
    issues_url: 'string',
    pulls_url: 'string',
    milestones_url: 'string',
    notifications_url: 'string',
    labels_url: 'string',
    releases_url: 'string',
    deployments_url: 'string',
    created_at: 'datetime',
    updated_at: 'datetime',
    pushed_at: 'datetime',
    git_url: 'string',
    ssh_url: 'string',
    clone_url: 'string',
    svn_url: 'string',
    homepage: 'string',
    size: 'float',
    stargazers_count: 'float',
    watchers_count: 'float',
    language: 'string',
    has_issues: 'boolean',
    has_projects: 'boolean',
    has_downloads: 'boolean',
    has_wiki: 'boolean',
    has_pages: 'boolean',
    forks_count: 'float',
    mirror_url: 'string',
    archived: 'boolean',
    disabled: 'boolean',
    open_issues_count: 'float',
    license: ELARA.StructType({
        key: 'string',
        name: 'string',
        spdx_id: 'string',
        url: 'string',
        node_id: 'string',
    }),
    forks: 'float',
    open_issues: 'float',
    watchers: 'float',
    default_branch: 'string',
    permissions: ELARA.StructType({
        admin: 'boolean',
        maintain: 'boolean',
        push: 'boolean',
        triage: 'boolean',
        pull: 'boolean',
    }),
}));
const rest_repos_detail_response_body_type = ELARA.StructType({
    id: 'float',
    node_id: 'string',
    name: 'string',
    full_name: 'string',
    'private': 'boolean',
    owner: ELARA.StructType({
        login: 'string',
        id: 'float',
        node_id: 'string',
        avatar_url: 'string',
        gravatar_id: 'string',
        url: 'string',
        html_url: 'string',
        followers_url: 'string',
        following_url: 'string',
        gists_url: 'string',
        starred_url: 'string',
        subscriptions_url: 'string',
        organizations_url: 'string',
        repos_url: 'string',
        events_url: 'string',
        received_events_url: 'string',
        type: 'string',
        site_admin: 'boolean',
    }),
    html_url: 'string',
    description: 'string',
    fork: 'boolean',
    url: 'string',
    forks_url: 'string',
    keys_url: 'string',
    collaborators_url: 'string',
    teams_url: 'string',
    hooks_url: 'string',
    issue_events_url: 'string',
    events_url: 'string',
    assignees_url: 'string',
    branches_url: 'string',
    tags_url: 'string',
    blobs_url: 'string',
    git_tags_url: 'string',
    git_refs_url: 'string',
    trees_url: 'string',
    statuses_url: 'string',
    languages_url: 'string',
    stargazers_url: 'string',
    contributors_url: 'string',
    subscribers_url: 'string',
    subscription_url: 'string',
    commits_url: 'string',
    git_commits_url: 'string',
    comments_url: 'string',
    issue_comment_url: 'string',
    contents_url: 'string',
    compare_url: 'string',
    merges_url: 'string',
    archive_url: 'string',
    downloads_url: 'string',
    issues_url: 'string',
    pulls_url: 'string',
    milestones_url: 'string',
    notifications_url: 'string',
    labels_url: 'string',
    releases_url: 'string',
    deployments_url: 'string',
    created_at: 'datetime',
    updated_at: 'datetime',
    pushed_at: 'datetime',
    git_url: 'string',
    ssh_url: 'string',
    clone_url: 'string',
    svn_url: 'string',
    homepage: 'string',
    size: 'float',
    stargazers_count: 'float',
    watchers_count: 'float',
    language: 'string',
    has_issues: 'boolean',
    has_projects: 'boolean',
    has_downloads: 'boolean',
    has_wiki: 'boolean',
    has_pages: 'boolean',
    forks_count: 'float',
    mirror_url: 'string',
    archived: 'boolean',
    disabled: 'boolean',
    open_issues_count: 'float',
    license: ELARA.StructType({
        key: 'string',
        name: 'string',
        spdx_id: 'string',
        url: 'string',
        node_id: 'string',
    }),
    forks: 'float',
    open_issues: 'float',
    watchers: 'float',
    default_branch: 'string',
    permissions: ELARA.StructType({
        admin: 'boolean',
        maintain: 'boolean',
        push: 'boolean',
        triage: 'boolean',
        pull: 'boolean',
    }),
    temp_clone_token: 'string',
    allow_squash_merge: 'boolean',
    allow_merge_commit: 'boolean',
    allow_rebase_merge: 'boolean',
    allow_auto_merge: 'boolean',
    delete_branch_on_merge: 'boolean',
    parent: ELARA.StructType({
        id: 'float',
        node_id: 'string',
        name: 'string',
        full_name: 'string',
        'private': 'boolean',
        owner: ELARA.StructType({
            login: 'string',
            id: 'float',
            node_id: 'string',
            avatar_url: 'string',
            gravatar_id: 'string',
            url: 'string',
            html_url: 'string',
            followers_url: 'string',
            following_url: 'string',
            gists_url: 'string',
            starred_url: 'string',
            subscriptions_url: 'string',
            organizations_url: 'string',
            repos_url: 'string',
            events_url: 'string',
            received_events_url: 'string',
            type: 'string',
            site_admin: 'boolean',
        }),
        html_url: 'string',
        description: 'string',
        fork: 'boolean',
        url: 'string',
        forks_url: 'string',
        keys_url: 'string',
        collaborators_url: 'string',
        teams_url: 'string',
        hooks_url: 'string',
        issue_events_url: 'string',
        events_url: 'string',
        assignees_url: 'string',
        branches_url: 'string',
        tags_url: 'string',
        blobs_url: 'string',
        git_tags_url: 'string',
        git_refs_url: 'string',
        trees_url: 'string',
        statuses_url: 'string',
        languages_url: 'string',
        stargazers_url: 'string',
        contributors_url: 'string',
        subscribers_url: 'string',
        subscription_url: 'string',
        commits_url: 'string',
        git_commits_url: 'string',
        comments_url: 'string',
        issue_comment_url: 'string',
        contents_url: 'string',
        compare_url: 'string',
        merges_url: 'string',
        archive_url: 'string',
        downloads_url: 'string',
        issues_url: 'string',
        pulls_url: 'string',
        milestones_url: 'string',
        notifications_url: 'string',
        labels_url: 'string',
        releases_url: 'string',
        deployments_url: 'string',
        created_at: 'datetime',
        updated_at: 'datetime',
        pushed_at: 'datetime',
        git_url: 'string',
        ssh_url: 'string',
        clone_url: 'string',
        svn_url: 'string',
        homepage: 'string',
        size: 'float',
        stargazers_count: 'float',
        watchers_count: 'float',
        language: 'string',
        has_issues: 'boolean',
        has_projects: 'boolean',
        has_downloads: 'boolean',
        has_wiki: 'boolean',
        has_pages: 'boolean',
        forks_count: 'float',
        mirror_url: 'string',
        archived: 'boolean',
        disabled: 'boolean',
        open_issues_count: 'float',
        license: ELARA.StructType({
            key: 'string',
            name: 'string',
            spdx_id: 'string',
            url: 'string',
            node_id: 'string',
        }),
        forks: 'float',
        open_issues: 'float',
        watchers: 'float',
        default_branch: 'string',
    }),
    source: ELARA.StructType({
        id: 'float',
        node_id: 'string',
        name: 'string',
        full_name: 'string',
        'private': 'boolean',
        owner: ELARA.StructType({
            login: 'string',
            id: 'float',
            node_id: 'string',
            avatar_url: 'string',
            gravatar_id: 'string',
            url: 'string',
            html_url: 'string',
            followers_url: 'string',
            following_url: 'string',
            gists_url: 'string',
            starred_url: 'string',
            subscriptions_url: 'string',
            organizations_url: 'string',
            repos_url: 'string',
            events_url: 'string',
            received_events_url: 'string',
            type: 'string',
            site_admin: 'boolean',
        }),
        html_url: 'string',
        description: 'string',
        fork: 'boolean',
        url: 'string',
        forks_url: 'string',
        keys_url: 'string',
        collaborators_url: 'string',
        teams_url: 'string',
        hooks_url: 'string',
        issue_events_url: 'string',
        events_url: 'string',
        assignees_url: 'string',
        branches_url: 'string',
        tags_url: 'string',
        blobs_url: 'string',
        git_tags_url: 'string',
        git_refs_url: 'string',
        trees_url: 'string',
        statuses_url: 'string',
        languages_url: 'string',
        stargazers_url: 'string',
        contributors_url: 'string',
        subscribers_url: 'string',
        subscription_url: 'string',
        commits_url: 'string',
        git_commits_url: 'string',
        comments_url: 'string',
        issue_comment_url: 'string',
        contents_url: 'string',
        compare_url: 'string',
        merges_url: 'string',
        archive_url: 'string',
        downloads_url: 'string',
        issues_url: 'string',
        pulls_url: 'string',
        milestones_url: 'string',
        notifications_url: 'string',
        labels_url: 'string',
        releases_url: 'string',
        deployments_url: 'string',
        created_at: 'datetime',
        updated_at: 'datetime',
        pushed_at: 'datetime',
        git_url: 'string',
        ssh_url: 'string',
        clone_url: 'string',
        svn_url: 'string',
        homepage: 'string',
        size: 'float',
        stargazers_count: 'float',
        watchers_count: 'float',
        language: 'string',
        has_issues: 'boolean',
        has_projects: 'boolean',
        has_downloads: 'boolean',
        has_wiki: 'boolean',
        has_pages: 'boolean',
        forks_count: 'float',
        mirror_url: 'string',
        archived: 'boolean',
        disabled: 'boolean',
        open_issues_count: 'float',
        license: ELARA.StructType({
            key: 'string',
            name: 'string',
            spdx_id: 'string',
            url: 'string',
            node_id: 'string',
        }),
        forks: 'float',
        open_issues: 'float',
        watchers: 'float',
        default_branch: 'string',
    }),
    network_count: 'float',
    subscribers_count: 'float',
});
const rest_repos_detail_response_headers_type = ELARA.StructType({
    'access-control-allow-origin': 'string',
    'access-control-expose-headers': 'string',
    'cache-control': 'string',
    connection: 'string',
    'content-encoding': 'string',
    'content-security-policy': 'string',
    'content-type': 'string',
    date: 'string',
    etag: 'string',
    'last-modified': 'string',
    'referrer-policy': 'string',
    server: 'string',
    'strict-transport-security': 'string',
    'transfer-encoding': 'string',
    vary: 'string',
    'x-accepted-oauth-scopes': 'string',
    'x-content-type-options': 'string',
    'x-frame-options': 'string',
    'x-github-media-type': 'string',
    'x-github-request-id': 'string',
    'x-oauth-client-id': 'string',
    'x-oauth-scopes': 'string',
    'x-ratelimit-limit': 'float',
    'x-ratelimit-remaining': 'integer',
    'x-ratelimit-reset': 'float',
    'x-ratelimit-resource': 'string',
    'x-ratelimit-used': 'integer',
    'x-xss-protection': 'float',
});

const rest_repos_commit_response_body_type = ELARA.ArrayType(ELARA.StructType({
    url: 'string',
    html_url: 'string',
}));

export default ELARA.RestApiSourceSchema({
    name: "Rest",
    authorisation: {
        success_uri: ELARA.Const("https://www.github.com"),
        authorise_request: {
            url: ELARA.Const("https://github.com/login/oauth/authorize"),
            method: 'GET',
            accept: 'application/json',
            body: ELARA.Struct({
                client_id: ELARA.Environment("GITHUB_CLIENT_ID"),
                redirect_uri: ELARA.Variable("redirect_uri", 'string'),
                scope: ELARA.Const("repo"),
            }),
            content: 'application/x-www-form-urlencoded',
        },
        authorise_response: {
            status_code_variable: ELARA.Variable("status_code", 'integer'),
            status_text_variable: ELARA.Variable("status_text", 'string'),
            body: ELARA.Parse(ELARA.Variable("body", rest_authorise_response_body_type)),
            body_variable: ELARA.Variable("body", rest_authorise_response_body_type),
            value: ELARA.Parse(ELARA.Variable("body", rest_authorise_response_body_type)),
        },
        redirect_variable: ELARA.Variable("redirect_uri", 'string'),
        authorise_variable: ELARA.Variable("authorise", rest_authorise_response_body_type),
        token_request: {
            url: ELARA.Const("https://github.com/login/oauth/access_token"),
            method: 'POST',
            accept: 'application/json',
            body: ELARA.Struct({
                client_id: ELARA.Environment("GITHUB_CLIENT_ID"),
                client_secret: ELARA.Environment("GITHUB_CLIENT_SECRET"),
                code: ELARA.GetField(ELARA.Variable("authorise", rest_authorise_response_body_type), "code"),
                redirect_uri: ELARA.Variable("redirect_uri", 'string'),
            }),
            content: 'application/x-www-form-urlencoded',
        },
        token_response: {
            status_code_variable: ELARA.Variable("status_code", 'integer'),
            status_text_variable: ELARA.Variable("status_text", 'string'),
            body: ELARA.Parse(ELARA.Variable("body", rest_token_response_body_type)),
            body_variable: ELARA.Variable("body", rest_token_response_body_type),
            value: ELARA.Parse(ELARA.Variable("body", rest_token_response_body_type)),
        },
        token_variable: ELARA.Variable("token", rest_token_response_body_type),
    },
    endpoints: {
        Repos: ELARA.RestApiEndpoint({
            primary_key: ELARA.Print(ELARA.Variable("id", 'float')),
            request: {
                url: ELARA.StringJoin([ELARA.Const("https://api.github.com/users/"), ELARA.Environment("GITHUB_USER"), ELARA.Const("/repos"),], ""),
                method: 'GET',
                accept: 'application/json',
                headers: ELARA.Struct({
                    Accept: ELARA.Const("application/vnd.github.v3+json"),
                    Authorization: ELARA.StringJoin([ELARA.Const("token "), ELARA.GetField(ELARA.Variable("token", rest_token_response_body_type), "access_token"),], ""),
                }),
                paginate: ELARA.Const(false),
                retry: ELARA.Const(false),
                content: 'application/json',
                n_pages_variable: ELARA.Variable("n_pages", 'integer'),
                n_attempts_variable: ELARA.Variable("n_attempts", 'integer'),
                datetime_variable: ELARA.Variable("request_datetime", 'datetime'),
                delay_ms: ELARA.Const(0n),
            },
            response: {
                status_code_variable: ELARA.Variable("status_code", 'integer'),
                status_text_variable: ELARA.Variable("status_text", 'string'),
                headers: ELARA.Parse(ELARA.Variable("headers", rest_repos_response_headers_type)),
                headers_variable: ELARA.Variable("headers", rest_repos_response_headers_type),
                body: ELARA.Parse(ELARA.Variable("body", rest_repos_response_body_type)),
                body_variable: ELARA.Variable("body", rest_repos_response_body_type),
                value: ELARA.Variable("body", rest_repos_response_body_type),
            },
            elements: {
                detail: ELARA.RestApiEndpointStructElement({
                    request: {
                        url: ELARA.StringJoin([
                            ELARA.Const("https://api.github.com/repos/"),
                            ELARA.Environment("GITHUB_USER"),
                            ELARA.Const("/"),
                            ELARA.Variable("name", 'string'),
                        ], ""),
                        method: 'GET',
                        accept: 'application/json',
                        headers: ELARA.Struct({
                            Accept: ELARA.Const("application/vnd.github.v3+json"),
                            Authorization: ELARA.StringJoin([ELARA.Const("token "), ELARA.GetField(ELARA.Variable("token", rest_token_response_body_type), "access_token"),], ""),
                        }),
                        content: 'application/x-www-form-urlencoded',
                        datetime_variable: ELARA.Variable("request_datetime", 'datetime'),
                    },
                    response: {
                        status_code_variable: ELARA.Variable("status_code", 'integer'),
                        status_text_variable: ELARA.Variable("status_text", 'string'),
                        headers: ELARA.Parse(ELARA.Variable("headers", rest_repos_detail_response_headers_type)),
                        headers_variable: ELARA.Variable("headers", rest_repos_detail_response_headers_type),
                        body: ELARA.Parse(ELARA.Variable("body", rest_repos_detail_response_body_type)),
                        body_variable: ELARA.Variable("body", rest_repos_detail_response_body_type),
                        value: ELARA.Variable("body", rest_repos_detail_response_body_type),
                    },
                    variable: ELARA.Variable("detail", rest_repos_detail_response_body_type),
                }),
                commits: ELARA.RestApiEndpointArrayElement({
                    request: {
                        url: ELARA.StringJoin([
                            ELARA.Const("https://api.github.com/repos/"),
                            ELARA.Environment("GITHUB_USER"),
                            ELARA.Const("/"),
                            ELARA.Variable("name", 'string'),
                            ELARA.Const("/"),
                            ELARA.Const("commits")
                        ], ""),
                        method: 'GET',
                        accept: 'application/json',
                        headers: ELARA.Struct({
                            Accept: ELARA.Const("application/vnd.github.v3+json"),
                            Authorization: ELARA.StringJoin([ELARA.Const("token "), ELARA.GetField(ELARA.Variable("token", rest_token_response_body_type), "access_token"),], ""),
                        }),
                        content: 'application/x-www-form-urlencoded',
                        datetime_variable: ELARA.Variable("request_datetime", 'datetime'),
                    },
                    response: {
                        status_code_variable: ELARA.Variable("status_code", 'integer'),
                        status_text_variable: ELARA.Variable("status_text", 'string'),
                        headers: ELARA.Parse(ELARA.Variable("headers", rest_repos_detail_response_headers_type)),
                        headers_variable: ELARA.Variable("headers", rest_repos_detail_response_headers_type),
                        body: ELARA.Parse(ELARA.Variable("body", rest_repos_commit_response_body_type)),
                        body_variable: ELARA.Variable("body", rest_repos_commit_response_body_type),
                        value: ELARA.Variable("body", rest_repos_commit_response_body_type),
                    },
                    variable: ELARA.Variable("commits", rest_repos_commit_response_body_type),
                }),
                commits_table: ELARA.RestApiEndpointTableElement({
                    primary_key: ELARA.Variable("url", 'string'),
                    request: {
                        url: ELARA.StringJoin([
                            ELARA.Const("https://api.github.com/repos/"),
                            ELARA.Environment("GITHUB_USER"),
                            ELARA.Const("/"),
                            ELARA.Variable("name", 'string'),
                            ELARA.Const("/"),
                            ELARA.Const("commits")
                        ], ""),
                        method: 'GET',
                        accept: 'application/json',
                        headers: ELARA.Struct({
                            Accept: ELARA.Const("application/vnd.github.v3+json"),
                            Authorization: ELARA.StringJoin([ELARA.Const("token "), ELARA.GetField(ELARA.Variable("token", rest_token_response_body_type), "access_token"),], ""),
                        }),
                        content: 'application/x-www-form-urlencoded',
                        datetime_variable: ELARA.Variable("request_datetime", 'datetime'),
                    },
                    response: {
                        status_code_variable: ELARA.Variable("status_code", 'integer'),
                        status_text_variable: ELARA.Variable("status_text", 'string'),
                        headers: ELARA.Parse(ELARA.Variable("headers", rest_repos_detail_response_headers_type)),
                        headers_variable: ELARA.Variable("headers", rest_repos_detail_response_headers_type),
                        body: ELARA.Parse(ELARA.Variable("body", rest_repos_commit_response_body_type)),
                        body_variable: ELARA.Variable("body", rest_repos_commit_response_body_type),
                        value: ELARA.Variable("body", rest_repos_commit_response_body_type),
                    },
                }),
            },
        }),
    }
})
